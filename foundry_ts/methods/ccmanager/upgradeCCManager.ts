
// generated by foundry_ts/methods/ccmanager/genCode.ts
// Path: foundry_scripts/ccmanager/upgradeCCManager.s.sol
import { addOperation } from "../../utils/config";
import { ccmanager_deploy_json } from "../../utils/const";
import { set_env_var, foundry_wrapper } from "../../foundry";
import { checkArgs } from "../../helper";
import { setupDeployJson } from "../../utils/setupDeployJson";
import { verifyContract } from "../verifyContract";

// current file name
const method_name = "upgradeCCManager";

export function upgradeCCManagerWithArgv(argv: any) {
    const required_flags = ["env", "network", "role", "broadcast"];
    checkArgs(method_name, argv, required_flags);
    upgradeCCManager(argv.env, argv.network, argv.role, argv.broadcast, argv.simulate);
}

export function upgradeCCManager(env: string, network: string, role: string, broadcast: boolean, simulate: boolean) {
    

    set_env_var(method_name, "env", env);
    set_env_var(method_name, "network", network);
    set_env_var(method_name, "role", role);
    set_env_var(method_name, "broadcast", broadcast.toString());
    foundry_wrapper(method_name, broadcast, simulate);

    if (role === "ledger") {
        verifyContract(env, network, "LedgerCCManager", false, undefined, "0.8.19", simulate);
    } else if (role === "vault") {
        verifyContract(env, network, "VaultCCManager", false, undefined, "0.8.19", simulate);
    } else {
        // error and exit
        console.log("role is not ledger or vault");
        process.exit(1);
    }
}

addOperation(method_name, upgradeCCManagerWithArgv);
