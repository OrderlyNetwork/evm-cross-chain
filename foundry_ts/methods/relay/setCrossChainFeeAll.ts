
// generated by foundry_ts/methods/ccmanager/genCode.ts
// Path: foundry_scripts/relay/setCrossChainFee.s.sol
import { addOperation } from "../../utils/config";
import { cc_gas_json, ccmanager_deploy_json } from "../../utils/const";
import { set_env_var, foundry_wrapper } from "../../foundry";
import { checkArgs } from "../../helper";
import { setupDeployJson } from "../../utils/setupDeployJson";
import { setCrossChainFee } from "./setCrossChainFee";

// current file name
const method_name = "setCrossChainFeeAll";

export function setCrossChainFeeAllWithArgv(argv: any) {
    const required_flags = ["env", "network", "methods"];
    checkArgs(method_name, argv, required_flags);
    setCrossChainFeeAll(argv.env, argv.network, argv.methods, argv.broadcast, argv.simulate);
}

export function setCrossChainFeeAll(env: string, network: string, methods: string, broadcast: boolean, simulate: boolean) {

    let methodList = undefined;
    if (methods) {
        methodList = methods.split(",");
    }

    // load from json file config/cross-chain-method-gas.json
    const fs = require('fs');
    const filePath = cc_gas_json;
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const jsonContent = JSON.parse(fileContent);
    console.log("gas jsonContent: ");
    console.log(jsonContent)
    for (const key in jsonContent) {
        if (methodList && !methodList.includes(key)) {
            continue;
        }
        setCrossChainFee(env, network, key, jsonContent[key], broadcast, simulate);
    }
}

addOperation(method_name, setCrossChainFeeAllWithArgv);
